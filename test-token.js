#!/usr/bin/env node

/**
 * Script para verificar token de Hugging Face
 * Uso: node test-token.js
 */

require('dotenv').config();

const { HfInference } = require('@huggingface/inference');

async function testToken() {
  console.log('üîç Verificando configuraci√≥n de Hugging Face\n');
  
  const token = process.env.HUGGINGFACE_API_KEY;
  
  console.log('üìã Estado del Token:');
  console.log('  - Configurado:', token ? '‚úÖ S√≠' : '‚ùå No');
  
  if (!token) {
    console.log('\n‚ùå ERROR: No se encontr√≥ HUGGINGFACE_API_KEY en el archivo .env');
    console.log('\nüìù Pasos para configurar:');
    console.log('  1. Crea el archivo .env en la ra√≠z del proyecto');
    console.log('  2. Agrega: HUGGINGFACE_API_KEY=hf_tu_token_aqui');
    console.log('  3. Obt√©n tu token en: https://huggingface.co/settings/tokens\n');
    process.exit(1);
  }
  
  console.log('  - Formato:', token.startsWith('hf_') ? '‚úÖ Correcto (hf_...)' : '‚ö†Ô∏è Inusual (deber√≠a empezar con hf_)');
  console.log('  - Longitud:', token.length, 'caracteres');
  console.log('  - Primeros 10 chars:', token.substring(0, 10) + '...');
  
  console.log('\nüß™ Probando conexi√≥n con Hugging Face...\n');
  
  try {
    const hf = new HfInference(token);
    
    // Test simple: verificar que el token funciona
    console.log('  ‚è≥ Verificando token con Hugging Face API...');
    
    // Intentar listar modelos (solo verifica autenticaci√≥n)
    const axios = require('axios');
    const response = await axios.get('https://huggingface.co/api/whoami-v2', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('  ‚úÖ Token v√°lido!');
    console.log('  ÔøΩ Usuario:', response.data.name || 'An√≥nimo');
    console.log('  üìß Email:', response.data.email ? response.data.email.substring(0, 3) + '***' : 'No disponible');
    
    console.log('\n‚ú® ¬°Token verificado exitosamente!\n');
    console.log('üìå Pr√≥ximo paso: Sube un archivo de audio en http://localhost:3000\n');
    console.log('üí° El modelo usar√°: openai/whisper-large-v3 (gratis, sin l√≠mites en HF)\n');
    
  } catch (error) {
    console.log('  ‚ùå Error al conectar\n');
    console.error('üìã Detalles del error:');
    console.error('  - Mensaje:', error.message);
    
    if (error.response) {
      console.error('  - Status:', error.response.status);
      console.error('  - Data:', JSON.stringify(error.response.data, null, 2));
    }
    
    console.log('\nüîç Posibles causas:');
    
    if (error.message.includes('401') || error.message.includes('Invalid')) {
      console.log('  ‚Ä¢ Token inv√°lido o expirado');
      console.log('  ‚Ä¢ Verifica que copiaste el token completo');
      console.log('  ‚Ä¢ Genera un nuevo token en: https://huggingface.co/settings/tokens');
    } else if (error.message.includes('429')) {
      console.log('  ‚Ä¢ L√≠mite de uso alcanzado temporalmente');
      console.log('  ‚Ä¢ Espera unos minutos e intenta de nuevo');
    } else if (error.message.includes('network') || error.message.includes('ENOTFOUND')) {
      console.log('  ‚Ä¢ Problema de conexi√≥n a internet');
      console.log('  ‚Ä¢ Verifica tu conexi√≥n de red');
    } else {
      console.log('  ‚Ä¢ Error desconocido');
      console.log('  ‚Ä¢ Revisa los detalles arriba');
    }
    
    console.log('');
    process.exit(1);
  }
}

testToken();
